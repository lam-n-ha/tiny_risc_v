module mips_core(
input clk, 
input rst, 
input start,
input [31:0]PC,
output reg done,
output reg [2:0]S,
output reg [2:0]NS
);

/* memory signals */
wire [7:0]i_out;
reg double;
reg [7:0]add;

/* FSM signals and parameters */
//reg [2:0] S;
//reg [2:0] NS;
parameter START = 3'b000;
parameter FETCH = 3'b001;
parameter READ = 3'b010;
parameter EXECUTE = 3'b011;
parameter WRITE = 3'b100;
parameter WRITEBACK = 3'b101;

/* S update always block */
always @(posedge clk or negedge rst)
begin
	if (rst == 1'b0)
		S <= START;
	else
		S <= NS;
end

/* NS transitions always block */
always @(*)
begin
	case (S)
		START: begin
		 if(start == 1'b1)
					NS = FETCH;
				 else
					NS = START;
					end
		FETCH: begin
			if(double == 1'b0) NS = FETCH;
			else NS = READ;
		end
		READ: begin
			if(double == 1'b0) NS = READ;
			else NS = EXECUTE;
		end
		EXECUTE: begin
			NS = WRITE;
		end
		WRITE: begin
			if(double == 1'b0) NS = WRITE;
			else NS = WRITEBACK;
		end
		WRITEBACK: begin
			NS = FETCH;
		DONE: NS = START;
	endcase		
end

/* clocked control signals always block */
always @(posedge clk or negedge rst)
begin
	if (rst == 1'b0)
	begin
		i <= 5'd0;
		sum <= 8'd0;
		done <= 1'b0;
	end
	else
	begin
		case (S)
			START: double <= 1'b0;
			GET: begin
			add <= i_out;
			double<=double+1;
			end
			ADD: begin
				sum <= sum + add;
				i <= i+1'b1;
			end
			DONE: done <= 1'b1;
		endcase
	end
end

endmodule
